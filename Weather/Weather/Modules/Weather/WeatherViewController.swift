// 
//  WeatherViewController.swift
//  Weather
//
//  Created by Canh Tran Wizeline on 6/11/20.
//  Copyright © 2020 CanhTran. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class WeatherViewController: BaseViewController {
    // MARK: - Public Properties
    
    var presenter: WeatherPresenterInterface!
    
    private lazy var tableView: UITableView = {
        let tableView = UITableView(frame: .zero)
        tableView.register(WeatherCell.self)
        tableView.rowHeight = UITableView.automaticDimension
        tableView.estimatedRowHeight = 150
        tableView.dataSource = self
        tableView.allowsSelection = false
        tableView.separatorStyle = .none
        tableView.keyboardDismissMode = .onDrag
        tableView.backgroundColor = AppColor.darkBackground
        return tableView
    }()
    
    private lazy var searchController: UISearchController = {
        let controller = UISearchController(searchResultsController: nil)
        controller.searchBar.barStyle = .black
        controller.searchBar.delegate = self
        controller.hidesNavigationBarDuringPresentation = false
        controller.obscuresBackgroundDuringPresentation = false
        return controller
    }()
    
    private lazy var refreshControl: UIRefreshControl = {
        let refreshControl = UIRefreshControl()
        refreshControl.addTarget(self,
                                 action: #selector(handleRefresh(_:)),
                                 for: .valueChanged)
        refreshControl.tintColor = AppColor.white
        refreshControl.backgroundColor = AppColor.darkBackground
        return refreshControl
    }()
    
    private let loadingIndicator: UIActivityIndicatorView = {
        let indicator = UIActivityIndicatorView()
        indicator.color = AppColor.white
        return indicator
    }()
    
    private lazy var emptyStateView: EmptyStateView = {
        let view = EmptyStateView(frame: .zero)
        return view
    }()
    
    private var tableViewState: TableViewState = .start
    
    // MARK: - LifeCycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        presenter.viewDidLoad()
    }
    
    // MARK: - Setup
    
    private func setupView() {
        title = "Weather Forecast"
        navigationController?.navigationBar.barTintColor = AppColor.darkBackground
        navigationController?.navigationBar.titleTextAttributes = [
            .foregroundColor: AppColor.white
        ]
        view.isAccessibilityElement = false
        statusBarStyle = .lightContent
        
        view.addSubview(tableView)
        tableView.anchor(top: view.layoutMarginsGuide.topAnchor,
                         left: view.safeAreaLayoutGuide.leftAnchor,
                         bottom: view.bottomAnchor,
                         right: view.safeAreaLayoutGuide.rightAnchor)
        
        view.addSubview(loadingIndicator)
        loadingIndicator.anchorCenter(horizontal: view.centerXAnchor,
                                      vertical: view.centerYAnchor)
        
        tableView.addSubview(refreshControl)
        tableView.tableHeaderView = searchController.searchBar
    }
    
    @objc
    private func handleRefresh(_ refreshControl: UIRefreshControl) {
        guard refreshControl.isRefreshing else { return }
        if let keyword = searchController.searchBar.text, !keyword.isEmpty {
            presenter.refreshListData(keyword: keyword)
        } else {
            refreshControl.endRefreshing()
            presenter.cleanup()
        }
    }
    
    private func displayEmptyStateView() {
        defer {
            emptyStateView.showMessage(state: presenter.tableViewState)
        }
        
        guard emptyStateView.superview == nil else { return }
        view.addSubview(emptyStateView)
        emptyStateView.pinToSuperview()
    }
}

// MARK: - WeatherViewInterface

extension WeatherViewController: WeatherViewInterface {
    func reloadData() {
        guard !refreshControl.isRefreshing else { return }
        tableView.reloadData()
    }
    
    func setLoadingVisible(_ visible: Bool) {
        loadingIndicator.isHidden = !visible
        if !visible {
            refreshControl.endRefreshing()
            loadingIndicator.stopAnimating()
        } else {
            loadingIndicator.startAnimating()
        }
    }
}

// MARK: - UITableViewDataSource

extension WeatherViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if presenter.numberOfForecast() == 0 {
            displayEmptyStateView()
        } else {
            emptyStateView.removeFromSuperview()
        }
        return presenter.numberOfForecast()
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell: WeatherCell = tableView.dequeueReusableCell(for: indexPath)
        if let data = presenter.dataAtIndex(index: indexPath.row) {
            cell.configCell(with: data)
        }
        return cell
    }
}

// MARK: - UISearchBarDelegate

extension WeatherViewController: UISearchBarDelegate {
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        presenter.cleanup()
    }
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        NSObject.cancelPreviousPerformRequests(withTarget: self,
                                               selector: #selector(performSearch),
                                               object: searchController.searchBar)
        perform(#selector(performSearch),
                with: searchController.searchBar,
                afterDelay: 0.75)
    }
    
    @objc
    func performSearch(_ searchBar: UISearchBar) {
        guard let query = searchBar.text?.trimmingCharacters(in: .whitespacesAndNewlines), query.count >= 3 else {
            Logger.shared.info(object: "Keyword length should be > 3 characters.")
            return
        }
        
        presenter.fetchWeatherData(keyword: query)
    }
}
