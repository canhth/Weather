// 
//  WeatherPresenter.swift
//  Weather
//
//  Created by Canh Tran Wizeline on 6/11/20.
//  Copyright © 2020 CanhTran. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation

final class WeatherPresenter {
    // MARK: - Private Properties

    private unowned let view: WeatherViewInterface
    private let interactor: WeatherInteractorInterface
    private let router: WeatherRouterInterface
    
    private var forecastList = [Forecast]() {
        didSet {
            view.reloadData()
        }
    }
    
    private var isLoading = false {
        didSet {
            view.setLoadingVisible(isLoading)
        }
    }
    
    private(set) var tableViewState: TableViewState = .start

    // MARK: - LifeCycle

    init(view: WeatherViewInterface,
         interactor: WeatherInteractorInterface,
         router: WeatherRouterInterface) {
        self.view = view
        self.interactor = interactor
        self.router = router
    }

    func viewDidLoad() {
        // Store the lastest keyword in result to support always search with latest keyword.
        if !AppUserDefault.lastKeyword.isEmpty {
            fetchWeatherData(keyword: AppUserDefault.lastKeyword)
        }
    }
}

// MARK: - WeatherPresenterInterface

extension WeatherPresenter: WeatherPresenterInterface {
    
    func numberOfForecast() -> Int {
        return forecastList.count
    }
    
    func dataAtIndex(index: Int) -> Forecast? {
        return forecastList[safe: index]
    }
    
    func refreshListData(keyword: String) {
        fetchWeatherData(keyword: keyword)
    }
    
    func cleanup() {
        tableViewState = .start
        forecastList.removeAll()
    }
    
    func fetchWeatherData(keyword: String) {
        isLoading = true
        interactor.fetchWeatherData(isCached: false, keyword: keyword) { [weak self] (result) in
            guard let self = self else { return }
            switch result {
            case .success(let forecasts):
                self.forecastList = forecasts
            case .failure(let error):
                // Dismiss search view controller first
                self.router.dismissView(animated: true)
                self.router.showAlert(title: "Error", message: error.localizedDescription)
                self.tableViewState = .error
                self.forecastList.removeAll()
            }
            self.isLoading = false
        }
    }
}
